                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f61804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Wang, Chen
                            | # 16307110064
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # The original baseline code is modified in great extension from the following 
                            | # four perspectives:
                            | # 1. The straightforward loop is unrolled into eight continuous executions.
                            | # Therefore, if the data is longer than 8, each loop will do eight continuous
                            | # copy actions, which can greatly reduce the number of iterations thus reducing 
                            | # the condition control overhead.
                            | # 2. There is usually the case that there are remainders that is not a multiple 
                            | # of eight. In this case, I just made the copy execution in a straight line way
                            | # without any iterations. This can reduce the control overhead for this part.
                            | # 3. Each condition jump is placed and designed carefully to make the prediction 
                            | # have the best correct possibilities.
                            | # 4. For the remaining parts, avoiding data hazard is also paid attention to
                            | # so as to elevate the efficiency.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: c0f2f8ffffffffffffff |     iaddq $-8, %rdx         # len = len - 7
0x03c: 71dd01000000000000   | 	jle Remaining                 # if len > 0, then go to Loop
                            | 
                            | ########-----Loop Separator-------################################
                            | 
0x045:                      | Loop:
0x045: 50170000000000000000 | 	mrmovq (%rdi), %rcx	    # save the first element from memory to register %rcx
0x04f: c0f74800000000000000 | 	iaddq $72, %rdi		    # src = src + 9 (move 72 bytes, i.e. 8 words forward)
0x059: c0f64800000000000000 | 	iaddq $72, %rsi			# dst = dst + 9 (move 72 bytes, i.e. 8 words forward)
0x063: 5087c0ffffffffffffff | 	mrmovq -64(%rdi), %r8	# save the second element from memory to register %r8
0x06d: 4016b8ffffffffffffff | 	rmmovq %rcx, -72(%rsi)  # save the value to the destination memory
0x077: 6211                 | 	andq %rcx, %rcx		    # test %rcx
0x079: 718c00000000000000   | 	jle LoopJmp1			# if the value is no greater than 0, then do not increment %rax
0x082: c0f00100000000000000 | 	iaddq $1, %rax		    # add the number of postive numbers
                            | 
0x08c:                      | LoopJmp1:
0x08c: 5097c8ffffffffffffff | 	mrmovq -56(%rdi), %r9   # to avoid load/use hazard, this read memory instruction is advanced
0x096: 4086c0ffffffffffffff | 	rmmovq %r8, -64(%rsi)	# save the second value to the destination memory
0x0a0: 6288                 | 	andq %r8, %r8			# test for future reference
0x0a2: 50a7d0ffffffffffffff | 	mrmovq -48(%rdi), %r10  # to avoid load/use hazard, this read memory instruction is advanced
0x0ac: 71bf00000000000000   | 	jle LoopJmp2			# if the value is no greater than 0, then do not increment %rax
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax			# add the number of postive numbers
                            | 
0x0bf:                      | LoopJmp2:
0x0bf: 4096c8ffffffffffffff | 	rmmovq %r9, -56(%rsi)   # save the third value to the destination memory
0x0c9: 6299                 | 	andq %r9, %r9           # test for future reference
0x0cb: 50b7d8ffffffffffffff | 	mrmovq -40(%rdi), %r11  # to avoid load/use hazard, this read memory instruction is advanced
0x0d5: 71e800000000000000   | 	jle LoopJmp3            # if the value is no greater than 0, then do not increment %rax
0x0de: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x0e8:                      | LoopJmp3:
0x0e8: 40a6d0ffffffffffffff | 	rmmovq %r10, -48(%rsi)  # save the forth value to the destination memory
0x0f2: 62aa                 | 	andq %r10, %r10         # test for future reference
0x0f4: 710701000000000000   | 	jle LoopJmp4            # if the value is no greater than 0, then do not increment %rax
0x0fd: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x107:                      | LoopJmp4:
0x107: 40b6d8ffffffffffffff | 	rmmovq %r11, -40(%rsi)  # save the fifth value to the destination memory
0x111: 5087e0ffffffffffffff | 	mrmovq -32(%rdi), %r8   # to avoid load/use hazard, this read memory instruction is advanced
0x11b: 62bb                 | 	andq %r11, %r11         # test to see if the value is no greater than 0
0x11d: 713001000000000000   | 	jle LoopJmp5
0x126: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x130:                      | LoopJmp5:
0x130: 4086e0ffffffffffffff | 	rmmovq %r8, -32(%rsi)   # save the sixth value to the destination memory
0x13a: 6288                 | 	andq %r8, %r8           # test for future reference
0x13c: 5097e8ffffffffffffff | 	mrmovq -24(%rdi), %r9   # to avoid load/use hazard, this read memory instruction is advanced
0x146: 715901000000000000   | 	jle LoopJmp6            # if the value is no greater than 0, then do not increment %rax
0x14f: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x159:                      | LoopJmp6:
0x159: 4096e8ffffffffffffff | 	rmmovq %r9, -24(%rsi)   # save the seventh value to the destination memory
0x163: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10   # to avoid load/use hazard, this read memory instruction is advanced
0x16d: 6299                 | 	andq %r9, %r9           # test for future reference
0x16f: 718201000000000000   | 	jle LoopJmp7            # if the value is no greater than 0, then do not increment %rax
0x178: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x182:                      | LoopJmp7:
0x182: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)   # save the seventh value to the destination memory
0x18c: 50b7f8ffffffffffffff | 	mrmovq -8(%rdi), %r11   # to avoid load/use hazard, this read memory instruction is advanced
0x196: 62aa                 | 	andq %r10, %r10           # test for future reference
0x198: 71ab01000000000000   | 	jle LoopJmp8            # if the value is no greater than 0, then do not increment %rax
0x1a1: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x1ab:                      | LoopJmp8:
0x1ab: 40b6f8ffffffffffffff | 	rmmovq %r11, -8(%rsi)   # save the eighth value to the destination memory
0x1b5: 62bb                 | 	andq %r11, %r11         # test to see if the value is no greater than 0
0x1b7: 71ca01000000000000   | 	jle LoopJmp9
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
                            | 
0x1ca:                      | LoopJmp9:
0x1ca: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx			# len - 9 and then len > 0 ?
0x1d4: 764500000000000000   | 	jg Loop					# if so, the loop will continue
                            | 
                            | ########-----Loop Separator-------################################
                            | 
                            | 
0x1dd:                      | Remaining:
0x1dd: c0f20800000000000000 |     iaddq $8, %rdx
0x1e7: 76f101000000000000   |     jg Continue
0x1f0: 90                   |     ret
                            | 
0x1f1:                      | Continue:
0x1f1: 50170000000000000000 |     mrmovq (%rdi), %rcx		# save the first element from memory to register %rcx
0x1fb: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x205: 762e02000000000000   |     jg RemAddFirstNotEnd    # if len > 0, then the work is not finished yet
                            | 
0x20e:                      | RemAddFirstEnd:
0x20e: 40160000000000000000 |     rmmovq %rcx, (%rsi)		# save the value to the destination memory
0x218: 6211                 |     andq %rcx, %rcx			# test *src to see whether the value is less than 0
0x21a: 71e403000000000000   |     jle Done                # if not greater than 0, jump
0x223: c0f00100000000000000 |     iaddq $1, %rax			# add the count of postive numbers
0x22d: 90                   |     ret
                            | 
0x22e:                      | RemAddFirstNotEnd:
0x22e: 40160000000000000000 |     rmmovq %rcx, (%rsi)		# save the value to the destination memory
0x238: 6211                 |     andq %rcx, %rcx			# test *src to see whether the value is less than 0
0x23a: 714d02000000000000   |     jle RemAdd1             # if not greater than 0, jump
0x243: c0f00100000000000000 |     iaddq $1, %rax			# add the count of postive numbers
                            | 
0x24d:                      | RemAdd1:
0x24d: 50870800000000000000 |     mrmovq 8(%rdi), %r8		# save the second element from memory to register %r8
0x257: 50971000000000000000 |     mrmovq 16(%rdi), %r9	# save the third element from memory to register %r9
0x261: 40860800000000000000 |     rmmovq %r8, 8(%rsi)		# save the value to the destination memory
0x26b: 6288                 |     andq %r8, %r8			# test *src to see whether the value is less than 0
0x26d: 718002000000000000   |     jle RemComp2            # if not greater than 0, jump
0x276: c0f00100000000000000 |     iaddq $1, %rax			# add the count of postive numbers
                            | 
0x280:                      | RemComp2:
0x280: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x28a: 769402000000000000   | 	jg RemAdd2              # if len > 0, then the work is not finished yet
0x293: 90                   | 	ret
                            | 
0x294:                      | RemAdd2:
0x294: 50a71800000000000000 |     mrmovq 24(%rdi), %r10	# save the forth element from memory to register %r10
0x29e: 40961000000000000000 |     rmmovq %r9, 16(%rsi)	# save the value to the destination memory
0x2a8: 6299                 |     andq %r9, %r9           # test *src to see whether the value is less than 0
0x2aa: 71bd02000000000000   |     jle RemComp3            # if not greater than 0, jump
0x2b3: c0f00100000000000000 |     iaddq $1, %rax          # add the count of postive numbers
                            | 
0x2bd:                      | RemComp3:
0x2bd: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x2c7: 76d102000000000000   | 	jg RemAdd3              # if len > 0, then the work is not finished yet
0x2d0: 90                   | 	ret
                            | 
0x2d1:                      | RemAdd3:
0x2d1: 50b72000000000000000 |     mrmovq 32(%rdi), %r11	# save the fifth element from memory to register %r11
0x2db: 40a61800000000000000 |     rmmovq %r10, 24(%rsi)	# save the value to the destination memory
0x2e5: 62aa                 |     andq %r10, %r10         # test *src to see whether the value is less than 0
0x2e7: 71fa02000000000000   |     jle RemComp4            # if not greater than 0, jump
0x2f0: c0f00100000000000000 |     iaddq $1, %rax          # add the count of postive numbers
                            | 
0x2fa:                      | RemComp4:
0x2fa: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x304: 760e03000000000000   | 	jg RemAdd4              # if len > 0, then the work is not finished yet
0x30d: 90                   | 	ret
                            | 
0x30e:                      | RemAdd4:
0x30e: 50172800000000000000 |     mrmovq 40(%rdi), %rcx	# save the sixth element from memory to register %rcx
0x318: 40b62000000000000000 |     rmmovq %r11, 32(%rsi)	# save the value to the destination memory
0x322: 62bb                 |     andq %r11, %r11         # test *src to see whether the value is less than 0
0x324: 713703000000000000   |     jle RemComp5            # if not greater than 0, jump
0x32d: c0f00100000000000000 |     iaddq $1, %rax          # add the count of postive numbers
                            | 
0x337:                      | RemComp5:
0x337: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x341: 764b03000000000000   | 	jg RemAdd5              # if len > 0, then the work is not finished yet
0x34a: 90                   | 	ret
                            | 
0x34b:                      | RemAdd5:
0x34b: 50873000000000000000 |     mrmovq 48(%rdi), %r8	# save the seventh element from memory to register %r8
0x355: 40162800000000000000 |     rmmovq %rcx, 40(%rsi)	# save the value to the destination memory
0x35f: 6211                 |     andq %rcx, %rcx         # test *src to see whether the value is less than 0
0x361: 717403000000000000   |     jle RemComp6            # if not greater than 0, jump
0x36a: c0f00100000000000000 |     iaddq $1, %rax          # add the count of postive numbers
                            | 
0x374:                      | RemComp6:
0x374: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x37e: 768803000000000000   | 	jg RemAdd6              # if len > 0, then the work is not finished yet
0x387: 90                   | 	ret
                            | 
0x388:                      | RemAdd6:
0x388: 50973800000000000000 |     mrmovq 56(%rdi), %r9	# save the seventh element from memory to register %r8
0x392: 40863000000000000000 |     rmmovq %r8, 48(%rsi)	# save the value to the destination memory
0x39c: 6288                 |     andq %r8, %r8         # test *src to see whether the value is less than 0
0x39e: 71b103000000000000   |     jle RemComp7            # if not greater than 0, jump
0x3a7: c0f00100000000000000 |     iaddq $1, %rax          # add the count of postive numbers
                            | 
0x3b1:                      | RemComp7:
0x3b1: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len = len - 1
0x3bb: 76c503000000000000   | 	jg RemAdd7              # if len > 0, then the work is not finished yet
0x3c4: 90                   | 	ret
                            | 
0x3c5:                      | RemAdd7:
0x3c5: 40963800000000000000 |     rmmovq %r9, 56(%rsi)	# save the value to the destination memory
0x3cf: 6299                 |     andq %r9, %r9			# test *src to see whether the value is less than 0
0x3d1: 71e403000000000000   |     jle Done                # if not greater than 0, jump
0x3da: c0f00100000000000000 |     iaddq $1, %rax			# add the count of postive numbers
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3e4:                      | Done:
0x3e4: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3e5:                      | End:
                            | #/* $end ncopy-ys */
0x3e5:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3e8:                      | 	.align 8
0x3e8:                      | src:
0x3e8: ffffffffffffffff     | 	.quad -1
0x3f0: feffffffffffffff     | 	.quad -2
0x3f8: 0300000000000000     | 	.quad 3
0x400: 0400000000000000     | 	.quad 4
0x408: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x410:                      | 	.align 16
0x410:                      | Predest:
0x410: fadebc0000000000     | 	.quad 0xbcdefa
0x418:                      | dest:
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438:                      | Postdest:
0x438: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x440:                      | .align 8
                            | # Run time stack
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
                            | 
0x4c0:                      | Stack:
