                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6e801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Wang, Chen
                            | # 16307110064
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 |     xorq %rax,%rax          # count = 0;
0x034: c0f2fcffffffffffffff |     iaddq $-4, %rdx         # calculate len - 4
0x03e: 76ab00000000000000   | 	jg Loop                 # if len >= 4 goto Loop
                            | 
0x047:                      | RESTT:
0x047: c0f20400000000000000 | 	iaddq $4, %rdx          # restore the old value of len
0x051:                      | REST:
0x051: 765b00000000000000   | 	jg NOT_FINISHED         # if %rdx is greater than 0,then not finished yet
0x05a: 90                   | 	ret
0x05b:                      | NOT_FINISHED:
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# load *src
0x065: c0f70800000000000000 | 	iaddq $8, %rdi
0x06f: 62aa                 | 	andq %r10, %r10			# test *src
0x071: 718400000000000000   | 	jle ADD3				# if not greater than 0, jump
0x07a: c0f00100000000000000 | 	iaddq $1, %rax			# add the count of postive numbers
0x084:                      | ADD3:
0x084: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# save
0x08e: c0f60800000000000000 | 	iaddq $8, %rsi
0x098: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x0a2: 705100000000000000   | 	jmp REST
0x0ab:                      | Loop:
0x0ab: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0b5: c0f72800000000000000 | 	iaddq $40, %rdi		# src+=5
0x0bf: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # save *src to *rsi
0x0c9: 62aa                 | 	andq %r10, %r10		# test %r10
0x0cb: 71de00000000000000   | 	jle ADD1			# if This number is not greater than 0, than not add %rax
0x0d4: c0f00100000000000000 | 	iaddq $1, %rax		# add the number of postive numbers
0x0de:                      | ADD1:
0x0de: 50a7e0ffffffffffffff | 	mrmovq -32(%rdi), %r10	# read the second number
0x0e8: c0f62800000000000000 | 	iaddq $40, %rsi			# dst += 5
0x0f2: 40a6e0ffffffffffffff | 	rmmovq %r10, -32(%rsi)	# save *(src + 1) to *(dst + 1)
0x0fc: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0fe: 50a7e8ffffffffffffff | 	mrmovq -24(%rdi), %r10   # rearrange the instructions to avoid load/use hazzard
0x108: 711b01000000000000   | 	jle ADD2				# if not, add the count
0x111: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x11b:                      | ADD2:
0x11b: 40a6e8ffffffffffffff | 	rmmovq %r10, -24(%rsi)
0x125: 62aa                 | 	andq %r10, %r10
0x127: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10
0x131: 714401000000000000   | 	jle ADD4
0x13a: c0f00100000000000000 | 	iaddq $1, %rax
0x144:                      | ADD4:
0x144: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)
0x14e: 62aa                 | 	andq %r10, %r10
0x150: 50a7f8ffffffffffffff | 	mrmovq -8(%rdi), %r10
0x15a: 716d01000000000000   | 	jle ADD5
0x163: c0f00100000000000000 | 	iaddq $1, %rax
0x16d:                      | ADD5:
0x16d: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)
0x177: 62aa                 | 	andq %r10, %r10
0x179: 718c01000000000000   | 	jle ADD6
0x182: c0f00100000000000000 | 	iaddq $1, %rax
0x18c:                      | ADD6:
0x18c: c0f2fbffffffffffffff | 	iaddq $-5, %rdx			# len -= 5 if(len - 4 > 0) that means len > 4
0x196: 76ab00000000000000   | 	jg Loop					# if so, goto Loop:
                            | 
0x19f: 704700000000000000   | 	jmp RESTT
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1a8:                      | Done:
0x1a8: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1a9:                      | End:
                            | #/* $end ncopy-ys */
0x1a9:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1b0:                      | 	.align 8
0x1b0:                      | src:
0x1b0: ffffffffffffffff     | 	.quad -1
0x1b8: 0200000000000000     | 	.quad 2
0x1c0: fdffffffffffffff     | 	.quad -3
0x1c8: 0400000000000000     | 	.quad 4
0x1d0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1e0:                      | 	.align 16
0x1e0:                      | Predest:
0x1e0: fadebc0000000000     | 	.quad 0xbcdefa
0x1e8:                      | dest:
0x1e8: abefcd0000000000     | 	.quad 0xcdefab
0x1f0: abefcd0000000000     | 	.quad 0xcdefab
0x1f8: abefcd0000000000     | 	.quad 0xcdefab
0x200: abefcd0000000000     | 	.quad 0xcdefab
0x208:                      | Postdest:
0x208: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x210:                      | .align 8
                            | # Run time stack
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
                            | 
0x290:                      | Stack:
