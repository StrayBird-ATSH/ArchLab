                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Wang, Chen
                            | # 16307110064
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 |     xorq %rax,%rax          # count = 0;
0x034: c0f2fcffffffffffffff |     iaddq $-4, %rdx         # len = len - 4
0x03e: 76ab00000000000000   | 	jg Loop                 # if len > 0, then go to Loop
                            | 
0x047:                      | Restore:
0x047: c0f20400000000000000 | 	iaddq $4, %rdx          # The value is mispredictedly substracted from len, thus make up the value here
0x051:                      | Rest:
0x051: 765b00000000000000   | 	jg NotFinished          # if len > 0, then the work is not finished yet
0x05a: 90                   | 	ret
0x05b:                      | NotFinished:
0x05b: 50170000000000000000 | 	mrmovq (%rdi), %rcx		# save the first element from memory to register %rcx
0x065: c0f70800000000000000 | 	iaddq $8, %rdi          # src = src + 1 (move 8 bytes, i.e. 1 word forward)
0x06f: 6211                 | 	andq %rcx, %rcx			# test *src to see whether the value is less than 0
0x071: 718400000000000000   | 	jle ADD 				# if not greater than 0, jump
0x07a: c0f00100000000000000 | 	iaddq $1, %rax			# add the count of postive numbers
0x084:                      | ADD:
0x084: 40160000000000000000 | 	rmmovq %rcx, (%rsi)		# save the value to the destination memory
0x08e: c0f60800000000000000 | 	iaddq $8, %rsi          # dst = dst + 1 (move 8 bytes, i.e. 1 word forward)
0x098: c0f2ffffffffffffffff | 	iaddq $-1, %rdx         # len = len - 1
0x0a2: 705100000000000000   | 	jmp Rest                # See whether len > 0
                            | 
                            | ########-----Loop Seperater-------################################
                            | 
                            | 
0x0ab:                      | Loop:
0x0ab: 50170000000000000000 | 	mrmovq (%rdi), %rcx	    # save the first element from memory to register %rcx
0x0b5: c0f72800000000000000 | 	iaddq $40, %rdi		    # src = src + 5 (move 40 bytes, i.e. 5 words forward)
0x0bf: c0f62800000000000000 | 	iaddq $40, %rsi			# dst = dst + 5 (move 40 bytes, i.e. 5 words forward)
0x0c9: 5087e0ffffffffffffff | 	mrmovq -32(%rdi), %r8	# save the second element from memory to register %r8
0x0d3: 4016d8ffffffffffffff | 	rmmovq %rcx, -40(%rsi)  # save the value to the destination memory
0x0dd: 6211                 | 	andq %rcx, %rcx		    # test %rcx
0x0df: 71f200000000000000   | 	jle ADD1			    # if the value is no greater than 0, then do not increment %rax
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax		    # add the number of postive numbers
0x0f2:                      | ADD1:
0x0f2: 5097e8ffffffffffffff | 	mrmovq -24(%rdi), %r9  # to avoid load/use hazard, this read memory instruction is advanced
                            | 
0x0fc: 4086e0ffffffffffffff | 	rmmovq %r8, -32(%rsi)	# save the second value to the destination memory
0x106: 6288                 | 	andq %r8, %r8			# test for future reference
0x108: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10  # to avoid load/use hazard, this read memory instruction is advanced
0x112: 712501000000000000   | 	jle ADD2				# if the value is no greater than 0, then do not increment %rax
0x11b: c0f00100000000000000 | 	iaddq $1, %rax			# add the number of postive numbers
0x125:                      | ADD2:
0x125: 4096e8ffffffffffffff | 	rmmovq %r9, -24(%rsi)  # save the third value to the destination memory
0x12f: 6299                 | 	andq %r9, %r9         # test for future reference
0x131: 50b7f8ffffffffffffff | 	mrmovq -8(%rdi), %r11   # to avoid load/use hazard, this read memory instruction is advanced
0x13b: 714e01000000000000   | 	jle ADD3                # if the value is no greater than 0, then do not increment %rax
0x144: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
0x14e:                      | ADD3:
0x14e: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)  # save the forth value to the destination memory
0x158: 62aa                 | 	andq %r10, %r10         # test for future reference
                            | 
0x15a: 716d01000000000000   | 	jle ADD4                # if the value is no greater than 0, then do not increment %rax
0x163: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
0x16d:                      | ADD4:
0x16d: 40b6f8ffffffffffffff | 	rmmovq %r11, -8(%rsi)   # save the fifth value to the destination memory
0x177: 62bb                 | 	andq %r11, %r11         # test to see if the value is no greater than 0
0x179: 718c01000000000000   | 	jle ADD5
0x182: c0f00100000000000000 | 	iaddq $1, %rax          # add the number of postive numbers
0x18c:                      | ADD5:
0x18c: c0f2fbffffffffffffff | 	iaddq $-5, %rdx			# len -= 5 if(len - 4 > 0) that means len > 4
0x196: 76ab00000000000000   | 	jg Loop					# if so, goto Loop:
0x19f: 704700000000000000   | 	jmp Restore
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1a8:                      | Done:
0x1a8: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1a9:                      | End:
                            | #/* $end ncopy-ys */
0x1a9:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1b0:                      | 	.align 8
0x1b0:                      | src:
0x1b0: 0100000000000000     | 	.quad 1
0x1b8: 0200000000000000     | 	.quad 2
0x1c0: 0300000000000000     | 	.quad 3
0x1c8: 0400000000000000     | 	.quad 4
0x1d0: fbffffffffffffff     | 	.quad -5
0x1d8: faffffffffffffff     | 	.quad -6
0x1e0: f9ffffffffffffff     | 	.quad -7
0x1e8: 0800000000000000     | 	.quad 8
0x1f0: f7ffffffffffffff     | 	.quad -9
0x1f8: 0a00000000000000     | 	.quad 10
0x200: 0b00000000000000     | 	.quad 11
0x208: 0c00000000000000     | 	.quad 12
0x210: f3ffffffffffffff     | 	.quad -13
0x218: 0e00000000000000     | 	.quad 14
0x220: 0f00000000000000     | 	.quad 15
0x228: 1000000000000000     | 	.quad 16
0x230: efffffffffffffff     | 	.quad -17
0x238: eeffffffffffffff     | 	.quad -18
0x240: 1300000000000000     | 	.quad 19
0x248: 1400000000000000     | 	.quad 20
0x250: ebffffffffffffff     | 	.quad -21
0x258: 1600000000000000     | 	.quad 22
0x260: e9ffffffffffffff     | 	.quad -23
0x268: 1800000000000000     | 	.quad 24
0x270: 1900000000000000     | 	.quad 25
0x278: e6ffffffffffffff     | 	.quad -26
0x280: e5ffffffffffffff     | 	.quad -27
0x288: 1c00000000000000     | 	.quad 28
0x290: 1d00000000000000     | 	.quad 29
0x298: e2ffffffffffffff     | 	.quad -30
0x2a0: 1f00000000000000     | 	.quad 31
0x2a8: 2000000000000000     | 	.quad 32
0x2b0: 2100000000000000     | 	.quad 33
0x2b8: deffffffffffffff     | 	.quad -34
0x2c0: 2300000000000000     | 	.quad 35
0x2c8: 2400000000000000     | 	.quad 36
0x2d0: dbffffffffffffff     | 	.quad -37
0x2d8: daffffffffffffff     | 	.quad -38
0x2e0: 2700000000000000     | 	.quad 39
0x2e8: d8ffffffffffffff     | 	.quad -40
0x2f0: 2900000000000000     | 	.quad 41
0x2f8: d6ffffffffffffff     | 	.quad -42
0x300: 2b00000000000000     | 	.quad 43
0x308: d4ffffffffffffff     | 	.quad -44
0x310: 2d00000000000000     | 	.quad 45
0x318: 2e00000000000000     | 	.quad 46
0x320: d1ffffffffffffff     | 	.quad -47
0x328: 3000000000000000     | 	.quad 48
0x330: cfffffffffffffff     | 	.quad -49
0x338: 3200000000000000     | 	.quad 50
0x340: cdffffffffffffff     | 	.quad -51
0x348: ccffffffffffffff     | 	.quad -52
0x350: cbffffffffffffff     | 	.quad -53
0x358: 3600000000000000     | 	.quad 54
0x360: c9ffffffffffffff     | 	.quad -55
0x368: c8ffffffffffffff     | 	.quad -56
0x370: c7ffffffffffffff     | 	.quad -57
0x378: c6ffffffffffffff     | 	.quad -58
0x380: c5ffffffffffffff     | 	.quad -59
0x388: c4ffffffffffffff     | 	.quad -60
0x390: c3ffffffffffffff     | 	.quad -61
0x398: c2ffffffffffffff     | 	.quad -62
0x3a0: c1ffffffffffffff     | 	.quad -63
0x3a8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0:                      | Postdest:
0x5b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5b8:                      | .align 8
                            | # Run time stack
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
                            | 
0x638:                      | Stack:
