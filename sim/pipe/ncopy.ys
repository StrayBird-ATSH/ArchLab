#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Wang, Chen
# 16307110064
#
# Describe how and why you modified the baseline code.
# The original baseline code is modified in great extension from the following 
# three perspectives:
# 1. The straightforward loop is unrolled into five continuous executions. 
# Therefore, if the data is longer than 5, each loop will do five continuous 
# copy actions, which can greatly reduce the number of iterations thus reducing 
# the condition control overhead.
# 2. There is usually the case that there are remainders that is not a multiple 
# of 5. In this case, I just made the copy execution in a straight line way 
# without any iterations. This can reduce the control overhead for this part.
# 3. Each condition jump is placed and designed carefully to make the prediction 
# have the best correct possibilities.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header

Continue:
    iaddq $-4, %rdx         # len = len - 4
	jg Loop                 # if len > 0, then go to Loop

Remaining:
    iaddq $4, %rdx
    jg Continue1
    ret

Continue1:
    mrmovq (%rdi), %rcx		# save the first element from memory to register %rcx
    rmmovq %rcx, (%rsi)		# save the value to the destination memory
    andq %rcx, %rcx			# test *src to see whether the value is less than 0
    jle RemComp1             # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers

RemComp1:
    iaddq $-1, %rdx         # len = len - 1
	jg RemAdd1          # if len > 0, then the work is not finished yet
	ret

RemAdd1:
    mrmovq 8(%rdi), %rcx		# save the first element from memory to register %rcx
    rmmovq %rcx, 8(%rsi)		# save the value to the destination memory
    andq %rcx, %rcx			# test *src to see whether the value is less than 0
    jle RemComp2             # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers

RemComp2:
    iaddq $-1, %rdx         # len = len - 1
	jg RemAdd2          # if len > 0, then the work is not finished yet
	ret

RemAdd2:
    mrmovq 16(%rdi), %rcx		# save the first element from memory to register %rcx
    rmmovq %rcx, 16(%rsi)		# save the value to the destination memory
    andq %rcx, %rcx			# test *src to see whether the value is less than 0
    jle RemComp3             # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers

RemComp3:
    iaddq $-1, %rdx         # len = len - 1
	jg RemAdd3          # if len > 0, then the work is not finished yet
	ret

RemAdd3:
    mrmovq 24(%rdi), %rcx		# save the first element from memory to register %rcx
    rmmovq %rcx, 24(%rsi)		# save the value to the destination memory
    andq %rcx, %rcx			# test *src to see whether the value is less than 0
    jle Done             # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers
	ret

########-----Loop Seperater-------################################


Loop:
	mrmovq (%rdi), %rcx	    # save the first element from memory to register %rcx
	iaddq $40, %rdi		    # src = src + 5 (move 40 bytes, i.e. 5 words forward)
	iaddq $40, %rsi			# dst = dst + 5 (move 40 bytes, i.e. 5 words forward)
	mrmovq -32(%rdi), %r8	# save the second element from memory to register %r8
	rmmovq %rcx, -40(%rsi)  # save the value to the destination memory
	andq %rcx, %rcx		    # test %rcx
	jle ADD1			    # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax		    # add the number of postive numbers
ADD1:
	mrmovq -24(%rdi), %r9  # to avoid load/use hazard, this read memory instruction is advanced
	rmmovq %r8, -32(%rsi)	# save the second value to the destination memory
	andq %r8, %r8			# test for future reference
	mrmovq -16(%rdi), %r10  # to avoid load/use hazard, this read memory instruction is advanced
	jle ADD2				# if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax			# add the number of postive numbers
ADD2:
	rmmovq %r9, -24(%rsi)  # save the third value to the destination memory
	andq %r9, %r9         # test for future reference
	mrmovq -8(%rdi), %r11   # to avoid load/use hazard, this read memory instruction is advanced
	jle ADD3                # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers
ADD3:
	rmmovq %r10, -16(%rsi)  # save the forth value to the destination memory
	andq %r10, %r10         # test for future reference
	jle ADD4                # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers
ADD4:
	rmmovq %r11, -8(%rsi)   # save the fifth value to the destination memory
	andq %r11, %r11         # test to see if the value is no greater than 0
	jle ADD5
	iaddq $1, %rax          # add the number of postive numbers
ADD5:
	iaddq $-5, %rdx			# len -= 5 if(len - 4 > 0) that means len > 4
	jg Loop					# if so, goto Loop:
    jmp Remaining

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
