#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Wang, Chen
# 16307110064
#
# Describe how and why you modified the baseline code.
# The original baseline code is modified in great extension from the following 
# five perspectives:
# 1. The straightforward loop is unrolled into nine continuous executions.
# Therefore, if the data is longer than 9, each loop will do nine continuous
# copy actions, which can greatly reduce the number of iterations thus reducing 
# the condition control overhead.
# 2. There is usually the case that there are remainders that is not a multiple 
# of nine. In this case, I just made the copy execution in a straight line way
# without any iterations. This can reduce the control overhead for this part.
# 3. Each condition jump is placed and designed carefully to make the prediction 
# have the best correct possibilities.
# 4. For the remaining parts, avoiding data hazard is also paid attention to
# so as to elevate the efficiency.
# 5. In order to eliminate the overhead of minusing and comparing the value of
# len in the remaining parts, a 3-ary tree is taken advantage of to quickly find
# the correct place to start the copying and the process will terminate in the
# specified steps without further comparision. Furthermore, the add %rax value
# instruction has also got changed position so as to eliminate bubbles.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
    iaddq $-8, %rdx         # len = len - 8
	jle Continue           # if len > 0, then go to Loop

########-----Loop Separator-------################################

Loop:
	mrmovq (%rdi), %rcx	    # save the first element from memory to register %rcx
	iaddq $72, %rdi		    # src = src + 9 (move 72 bytes, i.e. 8 words forward)
	iaddq $72, %rsi			# dst = dst + 9 (move 72 bytes, i.e. 8 words forward)
	mrmovq -64(%rdi), %r8	# save the second element from memory to register %r8
	rmmovq %rcx, -72(%rsi)  # save the value to the destination memory
	andq %rcx, %rcx		    # test %rcx
	jle LoopJmp1			# if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax		    # add the number of postive numbers

LoopJmp1:
	mrmovq -56(%rdi), %r9   # to avoid load/use hazard, this read memory instruction is advanced
	rmmovq %r8, -64(%rsi)	# save the second value to the destination memory
	andq %r8, %r8			# test for future reference
	mrmovq -48(%rdi), %r10  # to avoid load/use hazard, this read memory instruction is advanced
	jle LoopJmp2			# if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax			# add the number of postive numbers

LoopJmp2:
	rmmovq %r9, -56(%rsi)   # save the third value to the destination memory
	andq %r9, %r9           # test for future reference
	mrmovq -40(%rdi), %r11  # to avoid load/use hazard, this read memory instruction is advanced
	jle LoopJmp3            # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp3:
	rmmovq %r10, -48(%rsi)  # save the forth value to the destination memory
	andq %r10, %r10         # test for future reference
	jle LoopJmp4            # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp4:
	rmmovq %r11, -40(%rsi)  # save the fifth value to the destination memory
	mrmovq -32(%rdi), %r8   # to avoid load/use hazard, this read memory instruction is advanced
	andq %r11, %r11         # test to see if the value is no greater than 0
	jle LoopJmp5
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp5:
	rmmovq %r8, -32(%rsi)   # save the sixth value to the destination memory
	andq %r8, %r8           # test for future reference
	mrmovq -24(%rdi), %r9   # to avoid load/use hazard, this read memory instruction is advanced
	jle LoopJmp6            # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp6:
	rmmovq %r9, -24(%rsi)   # save the seventh value to the destination memory
	mrmovq -16(%rdi), %r10  # to avoid load/use hazard, this read memory instruction is advanced
	andq %r9, %r9           # test for future reference
	jle LoopJmp7            # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp7:
	rmmovq %r10, -16(%rsi)  # save the eighth value to the destination memory
	mrmovq -8(%rdi), %r11   # to avoid load/use hazard, this read memory instruction is advanced
	andq %r10, %r10         # test for future reference
	jle LoopJmp8            # if the value is no greater than 0, then do not increment %rax
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp8:
	rmmovq %r11, -8(%rsi)   # save the ninth value to the destination memory
	andq %r11, %r11         # test to see if the value is no greater than 0
	jle LoopJmp9
	iaddq $1, %rax          # add the number of postive numbers

LoopJmp9:
	iaddq $-9, %rdx			# len - 9 and then len > 0 ?
	jg Loop					# if so, the loop will continue

########-----Loop Separator-------################################

Continue:
    iaddq $5, %rdx
    jl LessThan3
    jg GreaterThan3
    jmp RemAdd3

LessThan3:
    iaddq $2, %rdx
    je RemAdd1
    iaddq $-1, %rdx
    je RemAdd2
    ret

GreaterThan3:
    iaddq $-3, %rdx
    jl FourAndFive
    jg SevenAndEight
    jmp RemAdd6

FourAndFive:
    iaddq $1, %rdx
    jl RemAdd4
    jmp RemAdd5

SevenAndEight:
    iaddq $-2, %rdx
    jl RemAdd7
    jmp RemAdd8

########-----Tree Separator-------################################

RemAdd8:
    mrmovq 56(%rdi), %r11	# save the eighth element from memory to register %r11
    rmmovq %r11, 56(%rsi)	# save the value to the destination memory
    andq %r11, %r11			# test *src to see whether the value is less than 0

RemAdd7:
    mrmovq 48(%rdi), %r8	# save the seventh element from memory to register %r8
    jle RemAdd7Rax          # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers
RemAdd7Rax:
    rmmovq %r8, 48(%rsi)	# save the value to the destination memory
    andq %r8, %r8			# test *src to see whether the value is less than 0

RemAdd6:
    mrmovq 40(%rdi), %r9	# save the sixth element from memory to register %r9
    jle RemAdd6Rax          # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers
RemAdd6Rax:
    rmmovq %r9, 40(%rsi)	# save the value to the destination memory
    andq %r9, %r9			# test *src to see whether the value is less than 0

RemAdd5:
    mrmovq 32(%rdi), %r10	# save the fifth element from memory to register %r10
    jle RemAdd5Rax          # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers
RemAdd5Rax:
    rmmovq %r10, 32(%rsi)	# save the value to the destination memory
    andq %r10, %r10         # test *src to see whether the value is less than 0

RemAdd4:
    mrmovq 24(%rdi), %r11   # save the forth element from memory to register %r11
    jle RemAdd4Rax          # if not greater than 0, jump
    iaddq $1, %rax          # add the count of postive numbers
RemAdd4Rax:
    rmmovq %r11, 24(%rsi)	# save the value to the destination memory
    andq %r11, %r11         # test *src to see whether the value is less than 0


RemAdd3:
    mrmovq 16(%rdi), %r8	# save the third element from memory to register %r8
    jle RemAdd3Rax          # if not greater than 0, jump
    iaddq $1, %rax          # add the count of postive numbers
RemAdd3Rax:
    rmmovq %r8, 16(%rsi)	# save the value to the destination memory
    andq %r8, %r8           # test *src to see whether the value is less than 0


RemAdd2:
    mrmovq 8(%rdi), %r9     # save the second element from memory to register %r9
    jle RemAdd2Rax          # if not greater than 0, jump
    iaddq $1, %rax          # add the count of postive numbers
RemAdd2Rax:
    rmmovq %r9, 8(%rsi)     # save the value to the destination memory
    andq %r9, %r9           # test *src to see whether the value is less than 0


RemAdd1:
    mrmovq (%rdi), %rcx		# save the first element from memory to register %rcx
     jle RemAdd1Rax         # if not greater than 0, jump
     iaddq $1, %rax         # add the count of postive numbers
RemAdd1Rax:
    rmmovq %rcx, (%rsi)     # save the value to the destination memory
    andq %rcx, %rcx			# test *src to see whether the value is less than 0
    jle Done                # if not greater than 0, jump
    iaddq $1, %rax			# add the count of postive numbers
	ret

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
