#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Wang, Chen
# 16307110064
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
    xorq %rax,%rax          # count = 0;
    iaddq $-4, %rdx         # calculate len - 4
	jg Loop                 # if len >= 4 goto Loop

RESTT:
	iaddq $4, %rdx          # restore the old value of len
REST:
	jg NOT_FINISHED         # if %rdx is greater than 0,then not finished yet
	ret
NOT_FINISHED:
	mrmovq (%rdi), %r10		# load *src
	iaddq $8, %rdi
	andq %r10, %r10			# test *src
	jle ADD3				# if not greater than 0, jump
	iaddq $1, %rax			# add the count of postive numbers
ADD3:
	rmmovq %r10, (%rsi)		# save
	iaddq $8, %rsi
	iaddq $-1, %rdx
	jmp REST
Loop:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $40, %rdi		# src+=5
	rmmovq %r10, (%rsi) # save *src to *rsi
	andq %r10, %r10		# test %r10
	jle ADD1			# if This number is not greater than 0, than not add %rax
	iaddq $1, %rax		# add the number of postive numbers
ADD1:
	mrmovq -32(%rdi), %r10	# read the second number
	iaddq $40, %rsi			# dst += 5
	rmmovq %r10, -32(%rsi)	# save *(src + 1) to *(dst + 1)
	andq %r10, %r10			# val <= 0?
	mrmovq -24(%rdi), %r10   # rearrange the instructions to avoid load/use hazzard
	jle ADD2				# if not, add the count
	iaddq $1, %rax			# count++
ADD2:
	rmmovq %r10, -24(%rsi)
	andq %r10, %r10
	mrmovq -16(%rdi), %r10
	jle ADD4
	iaddq $1, %rax
ADD4:
	rmmovq %r10, -16(%rsi)
	andq %r10, %r10
	mrmovq -8(%rdi), %r10
	jle ADD5
	iaddq $1, %rax
ADD5:
	rmmovq %r10, -8(%rsi)
	andq %r10, %r10
	jle ADD6
	iaddq $1, %rax
ADD6:
	iaddq $-5, %rdx			# len -= 5 if(len - 4 > 0) that means len > 4
	jg Loop					# if so, goto Loop:

	jmp RESTT
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
